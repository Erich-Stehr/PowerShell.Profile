select @{n='x';e={$_*$_}}
$localCred = (get-credential "$env:USERDOMAIN\$env:USERNAME").GetNetworkCredential()
$after[1].get_Attributes() | select @{n='Name';e={$_.get_LocalName()}},@{n='Value';e={$_."#text"}}
(get-item "hklm:software\microsoft\shared tools\web server extensions\15.0").getvalue("version")
$os = gwmi Win32_OperatingSystem; ((Get-Date)-$os.converttodatetime($os.lastbootuptime))
http://www.youtube.com/v/{}&amp;hl=en&amp;fs=1&amp;  http://www.youtube.com/watch?v=pwbA4f1O93s
(get-history -count ([Int16]::MaxValue-1)) | ... CommandLine | out-file x.ps1
gwmi Win32_LogicalDisk -Filter "Size >= 0" | select DeviceID,@{n='FreeSpace';e={$_.FreeSpace.ToString("N0")}},@{n='Size';e={$_.Size.ToString("N0")}},{$_.VolumeName}
$host.UI.RawUI.WindowTitle = "Windows PowerShell ($([Environment]::MachineName))"
if ( (New-Object System.Security.Principal.WindowsPrincipal([System.Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator) ) {
dir | %{ $_.Attributes = $_.Attributes -band -bnot [System.IO.FileAttributes]::ReadOnly }
[Enum]::GetValues([Environment+SpecialFolder]) | select @{n='Name';e={$_}},@{n='Path';e={[Environment]::GetFolderPath($_)}} | ft -auto -wrap
[Environment]::CurrentDirectory=$pwd
Start-Job -Name pester { cd $using:PWD ; . Use-AzDevSubscription.ps1; Invoke-Pester -Strict $using:testfile } | Receive-Job -Wait -AutoRemoveJob
# $using:, -AutoRemoveJob, -Wait are PoSH3 # Start-Job -Name pester -ArgumentList @($PWD, $testfile) { param($p, $testfile); Import-Module Pester; cd $P ; . Use-AzDevSubscription.ps1; Invoke-Pester -Strict $testfile } | Wait-Job | Receive-Job ; Remove-Job -Name pester
robocopy /zb /j /e /nooffload

[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SharePoint.Publishing")

[System.Reflection.Assembly]::LoadFrom("C:\app\ScraperService\HtmlAgilityPack.dll"); $hd = New-Object HtmlAgilityPack.HtmlDocument
(Get-Clipboard).Split([Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | % {$_.Trim()} | %{"#$_#"}  # | del -WhatIf -Recurse -Path {$_}
(Get-Clipboard).Split([Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | %{ $_ -replace ' - ([\w.-]+?) .*','$1' } | % { choco upgrade $_ -y }

$wc.DownloadString("http://spdev25:7000/_layouts/15/ScriptResx.ashx?name=CMSClientResources&culture=en-US")

$pubweb = [Microsoft.SharePoint.Publishing.PublishingWeb]::GetPublishingWeb($web)

New-Item -ItemType File|Directory|SymbolicLink|Junction|HardLink -Path .\$($_.Name) -Value $_ -Force ; (Get-Item .\D).Delete(); # Hint: what is 'dir' alias of?

(gp HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters).SearchList
([adsisearcher]"(&(objectCategory=computer)(name=*erich*))").findAll() | % {([adsi]$_.path)} | select cn,operatingsystem
([adsisearcher]"(&(objectCategory=user)(sAMAccountName=erich.stehr))").findOne() | select @{n='PwdLastSet';e={[DateTime]::FromFileTime($_.properties.pwdlastset[0])}}
([ADSISEARCHER]"sAMAccountName=$($env:USERNAME)").FindOne().Properties.memberof | sort #2016/04/05 what groups is $env:USERNAME a member of, 2023/08/21 property name is case sensitive # also `whoami /groups /fo csv | ConvertFrom-csv | sort "Group Name"` or `net user $env:USERNAME /domain`
# from other domain (still in progress) # $search = [adsisearcher]([adsi]"LDAP://OU=IAC,OU=Servers,OU=BECU,DC=inside,DC=becu,DC=org") ; $search.Filter = "(&(objectCategory=computer)(name=avmelc*))"; $search.findAll() | % {([adsi]$_.path)}
PSCX: New-PSDrive sbux DirectoryServices 'LDAP://DC=starbucks,DC=net'
    - `dir sbux: | select Name,Types`

Get-Clipboard | % { $_.Split("`n") } | % { if ($_ -match '\d*[.:] (.*$)') { $matches[1] } } # remove /d*[:.]/ leader from clipboard lines
[appdomain]::currentdomain.GetAssemblies() | Foreach-Object {$_.gettypes()} | sort BaseType
[appdomain]::currentdomain.GetAssemblies() | where {!($_.globalassemblycache)}
Get-WmiObject win32_groupuser | ? { $_.partcomponent -match 'name="erich"'} | % {[wmi]$_.groupcomponent} # 2012/12/16 technet heyscriptingguy
Get-wmiobject win32_service -Filter "startmode = 'auto' AND state != 'running' AND Exitcode !=0 " -ComputerName . | select name, startname, exitcode # 2012/12/18 technet heyscriptingguy
gwmi Win32_Process -Filter "Name='powershell.exe'" | ft -auto -wrap __PATH,CommandLine #2015/06/18

# merge lines from console Select All, Copy at 120 column output
( (Get-Clipboard).Split([Environment]::NewLine[1]) | & { begin { $s = "" } process { if ($_.Length -eq 121) { $s += $_ } elseif ($_.Length -eq 120) { $s += $_ + ' ' } else { "$s$_"; $s = "" } } end { if ($s -ne "") { $s } } } )

$passparts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%&*?' # 2022/10/21 TMO Core limits: 15+ chars, no names, at least one of the 8 non-alphanums, at least one digit, no names, no SAMs
$passparts = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890+/@:.~' # RFC4648 Base64 + GitLab masked variable characters
$passparts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@#$%^&*_-+=`|\(){}[]:;"''<>,.?/' # 2022/07/14 <https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/password-must-meet-complexity-requirements> but can also include diacritics, Greek letters, and Cyrillic letters
$passparts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()' # Onebox restricted 'symbols'
$passparts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^&*()_+-={}|[]\:";''<>?,./' # from Windows Live ID and Account Mangement Help
$passparts = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!%*_+-=[]:?./' # removed quotes and command-line specials
$r = new-object Random ([Int32]([DateTime]::Now.Ticks -band 0x7fffffff)); 0..15 | % { $passparts.Chars($r.Next(0,$passparts.Length)) } | Join-String
function Get-RandomCNG([object]$InputObject, [int]$Count=1) {
	$rcsp = [Security.Cryptography.RNGCryptoServiceProvider]::Create()
	$rb = new-object Byte[] 1
	$f = $InputObject.Count
	$sp = [Math]::Truncate([Byte]::MaxValue/($f))
	$r = 0
	#New-Object PSObject | select @{'n'='$sp';e={$sp}},@{'n'='$f';e={$f}} | ft
	for ($i = 0; $i -lt $Count; ++$i) {
		do {
			$rcsp.GetBytes($rb)
			$r = [Math]::Truncate($rb[0]/$sp)
			#New-Object PSObject | select @{'n'='$r';e={$r}} | ft
		} while ($r -ge $f)
		$InputObject[$r]
	}
	$rcsp.Dispose()
}
Get-RandomCNG $passparts.ToCharArray() 16 | Join-String

Write-Debug ((New-Object System.Management.Automation.PSCredential ('x', $result)).GetNetworkCredential().Password) # dump Security.SecureString $result to debug stream 2017/01/23
$cert = dir Cert:\LocalMachine\My\4e* ;
	Set-Content -Path "($cert.Subject).cer" -Value ($cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::SerializedCert)) -Encoding Byte -Force
	Set-Content -Path "($cert.Subject).pfx" -Value ($cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pfx, $pass)) -Encoding Byte -Force
dir *.*.pfx | % { New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($_, ([IO.Path]::GetExtension([IO.Path]::GetFileNameWithoutExtension($_)).Substring(1)), "Exportable,MachineKeySet,PersistKeySet") } | % { Set-Content -Path ([IO.Path]::ChangeExtension($_.Subject, ".pfx")) -Value ($_.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pfx, $password)) -Encoding Byte -Force
$stscert = new-object System.Security.Cryptography.X509Certificates.X509Certificate2; $stscert.Import($stsCertPath, $pfxCred.Password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"Exportable")
$cred3 = (New-Object 'System.Management.Automation.PSCredential' @('\Administrator', (ConvertTo-SecureString -force -AsPlainText 'NovaFMXN!@'))); Invoke-Command -comp 10.3.0.53 -cred $cred3 -ScriptBlock { $env:computername } # must be '\Administrator', new-object not inline with command
# 2020/03/19 export authentication cert in base-64 with PSCX to clipboard
dir Cert:\LocalMachine\My | ? { $_.Subject.StartsWith('CN=acc753e7') } | %{ [Convert]::ToBase64String($_.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)) } | Write-Clipboard -NoNewLine
# 2023/03/03 given a comma separated string of DnsName parts, list the certificates that contain a part in their DnsName in newest first order (derived from <https://stackoverflow.com/a/31620141>)
$sns = "FieldglassDatabaseEncryption,proofme".Split(","); dir Cert:\LocalMachine\My\ | ? { $dns = $_.GetNameInfo([System.Security.Cryptography.X509Certificates.X509NameType]::DnsName, $false); $null -ne ($sns | ? { $dns.Contains($_)})  }  | sort NotBefore -desc

$warnings = Get-OutlookInBox.ps1 | ? { $_.Subject.StartsWith('Azure Security Advisory') } # SenderName is 'friendly'
$warnings |
	select @{n='SubscriptionId';e={[regex]::Match($_.Body, 'SubscriptionId: *([0-9a-f-]{36})').Groups[1].Value}}, @{n='Deployment';e={[regex]::Match($_.Body, 'Deployments: (.*)').Groups[1].Value}} |
	Export-Csv -Path SecAdvisory.csv

#
$updateSearcher = new-object -com "Microsoft.Update.Searcher";
$updateCount= $updateSearcher.GetTotalHistoryCount();
if ($updateCount -eq 0) { 0 } else {
	@($updateSearcher.QueryHistory(0,$updateCount) |
	? { $_.UpdateIdentity.UpdateId -eq 'df31c69c-1f04-4e07-8e1e-9faef2fe7a1b' -or # 2008R2 update
		$_.UpdateIdentity.UpdateId -eq 'd2281849-7314-4da5-bed1-9e8e4d74b4ed' # 2012R2 update
		}
	).Count
}
# force Windows Update (pre-Win10) to automatically update on schedule
$au = new-object -com "Microsoft.Update.AutoUpdate"; $auset = $au.Settings; $auset.NotificationLevel=4; $auset.Save()

# mstsc <https://stackoverflow.com/questions/11296819/run-mstsc-exe-with-specified-username-and-password>
Set-ItemProperty 'HKCU:\Software\Microsoft\Terminal Server Client\' AuthenticationLevelOverride -Value 0 # removes cert warnings on connect
.\Get-AllNovaVMs.ps1 -dbCred $prodCred | ? {$_.Name.StartsWith('ORGID') -and $_.TopologyID -gt 71} | % { $_ ; $cn=$_.Name -replace 'vm1','.cloudapp.net'; cmdkey "/generic:$cn" /user:Administrator "/pass:$($_.Password)" ; AwaitRdpConnection $cn -nodrop ; Read-Host ; cmdkey "/delete:$cn" }
start-process -wait -filepath "$env:windir\system32\mstsc.exe" -argumentlist "/v:$cn","/w:1440","/h:900"

Set-Clipboard -Text ([Convert]::ToBase64String([Text.Encoding]::Default.GetBytes((Get-Clipboard))))
Set-Clipboard -Text ([Text.Encoding]::Default.GetString([Convert]::FromBase64String(Get-Clipboard)))
Set-Clipboard -Text ([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes((Get-Clipboard))))
Set-Clipboard -Text ([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String(Get-Clipboard)))

New-ItemProperty -Path 'HKCU:\Control Panel\Input Method' -Name EnableHexNumpad -PropertyType STRING -Value "1" # then reboot(pre-Vista)/logout and login to activate Unicode Alt-(NUMPAD+)-(Numpad-Hex){4}

pushd "$([Environment]::GetFolderPath('Desktop'))\Notes" ; dir .\*.URL | sort LastWriteTime | select Name,LastWriteTime,@{n='URL';e={select-string -LiteralPath ($_.FullName) -Pattern '^URL=' | % {$_.Line -replace '^URL=',''}}} | % { "$("{0:o}" -f $_.LastWriteTime) <a href='$($_.URL)'>$([System.Web.HTTPUtility]::HtmlEncode($_.Name))</a><br />" } | Add-Content -Encoding UTF8 -Path .\Links.fragment.html ; gc .\Links.fragment.html | Out-Clipboard ; (Get-Clipboard).Length ; copy .\Links.fragment.html "${env:OneDrive}\Links.fragment.html" ; popd
pushd ~\Desktop\Notes; gc $PWD\Links.fragment.html | %{ [void]($_ -match "(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{1,7}[-+]\d{2}:\d{2}) <a href='(.*?)'>(.*)</a><br />"); New-PSObjectFromHashtable @{LastWriteTime=[DateTime]$Matches[1];URL=$Matches[2];FileName=HtmlDecode($Matches[3])}  } | %{ if (![IO.File]::Exists("$PWD\$($_.FileName)")) {New-FileShortcut.ps1 ($_.URL) $null ("$PWD\$($_.FileName)")} ; Set-FileTime -LiteralPath ("$PWD\$($_.FileName)") -Time ($_.LastWriteTime) -Modified } ; popd

[System.Management.Automation.VerbsCommon].DeclaredFields.Name # `Get-Verbs | Out-GridView` in 3.0+
# $verbClasses = [AppDomain]::CurrentDomain.GetAssemblies() | ? { $_.FullName.StartsWith("System.Management.Automation,") } | % { $_.GetTypes() } | ? { $_.Name.StartsWith("Verbs") }
# from <https://devblogs.microsoft.com/powershell/get-verb/>
$verbClasses = [PSObject].Assembly.GetTypes() | ? {$_.Name -like "*Verbs*"} # Get-Member -type Property -static | select -ExpandProperty Name

# sql server: kill spids holding single user $dbName open, make multi-user again <https://stackoverflow.com/questions/14652923/set-database-from-single-user-mode-to-multi-user>, <https://stackoverflow.com/questions/24497970/sqlcmd-to-generate-file-without-dashed-line-under-header-without-row-count>
sqlcmd -h -1 -Q "SET NOCOUNT ON; SELECT spid from master.sys.sysprocesses WHERE spid > 50 AND dbid=DB_ID ('$dbName')" | % { sqlcmd -Q "KILL $_" }; sqlcmd -Q "ALTER DATABASE $dbName SET MULTI_USER WITH ROLLBACK IMMEDIATE"

# 2020/02/03-08: http://blogs.clariusconsulting.net/kzu/reading-xml-document-fragments-in-net/ from 2007/08/04
$xrs = New-object Xml.XmlReaderSettings; $xrs.ConformanceLevel = [Xml.ConformanceLevel]::Fragment; $xpdoc = New-Object Xml.XPath.XPathDocument @([Xml.XmlReader]::Create("$PWD\app_tracelog.svclog", $xrs)) ; $nav = $xpdoc.CreateNavigator() ; $(for ($nav.MoveToFirstChild(); $nav.MoveToNext();) { $nav.OuterXml }) | select -f 1 # can't share write on input, file needs to be completed
# 2020/02/08
$xrs = New-object Xml.XmlReaderSettings; $xrs.ConformanceLevel = [Xml.ConformanceLevel]::Fragment; $xr = [Xml.XmlReader]::Create("$PWD\app_tracelog1.svclog", $xrs) ; $(for ($xr.MoveToContent(); $x = $xr.ReadOuterXml();) { $x }) | measure-object
# Select-Xml -Path .\app_tracelog1.svclog -XPath '/E2ETraceEvent' # can't share write on input, can't conform to fragments even through pipeline
$xrs = New-object Xml.XmlReaderSettings; $xrs.ConformanceLevel = [Xml.ConformanceLevel]::Fragment; PSUsing ($fs = New-Object IO.FileStream @("$PWD\app_tracelog1.svclog", [IO.FileMode]::Open, [IO.FileAccess]::Read, [IO.FileShare]::ReadWrite)) { PSUsing ($sr = New-Object IO.StreamReader @($fs)) { $xr = [Xml.XmlReader]::Create($sr, $xrs) ; $(for ($xr.MoveToContent(); $x = $xr.ReadOuterXml();) { $x }) ; $xr.Close() ; $sr.Close() } ; $fs.Close() } | measure-object

# 2020/02/27: simple 'o' time log exclusion
select-string -pattern '[0-9T:.-]*Z\t(Copy|Done copying|Checking|Found)' -Path '\\proxcard-dev\c$\Users\v-ersteh\AppData\Local\ProxEventManager.log' -notmatch | select -l 40 | ... Line
select-string -pattern '^ProxEventManager Verbose: 0 : [0-9T:.-]*Z:\t(Copy|Done copying|Checking|Found)' -Path '\\proxcard-dev\c$\Users\v-ersteh\AppData\Local\ProxEventManager.log' -notmatch | select -l 16 | ... Line
# shutdown /r /m \\proxcard-dev /t 1 /d U:0:5 /c "mstsc responses hung"

# 2020/08/13: from <https://stackoverflow.com/questions/1153126/how-to-create-a-zip-archive-with-powershell/52395011#52395011> et al.; .NET 4.5
del .\z.zip; Add-Type -Assembly 'System.IO.Compression','System.IO.Compression.FileSystem'; [Environment]::CurrentDirectory=$pwd; PSUsing ($z = [System.IO.Compression.ZipFile]::Open('z.zip', [System.IO.Compression.ZipArchiveMode]::Create)) { dir .* | ? {!$_.PsIsContainer} | select -ExpandProperty FullName | % { [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($z, $_, $_.Replace("$PWD\", '')) } }

# 2021/06/02: saw newbie wanted to run VS with a file; this is as simple as it gets?
& (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property productPath)  $filename

# 2021/08/26: Autofac+System.Configuration conversion to code (one escape character for the commandline parser, one for the string)
Select-Xml -Path .\ProcessorDependencyConfig.xml -XPath "/autofac/components" | %{ $_.Node } | %{ "container.RegisterType<$($_.Name)>()$( $_.services | %{ ".As<$($_.Type)>()" })$(if ($_.Parameters) {$_.Parameters.GetEnumerator() | ? {! $_.Name.StartsWith("#") } | %{ ".WithParameter(``"$($_.Name)``", $($_.InnerText))" }}).SingleInstance();" }

# 2021/11/30: Check URIs from Excel file
.\Invoke-SqlCommandCe.ps1 (resolve-path ..\ServersAndPorts_Verification_20211130.xlsx) -sql "select [New_Server Url or DB Connection or Executable] AS Url from [ServersAndPorts$] order by [New_Server Name],[New_Port #]" | ? {($_.Url).Trim().StartsWith("http")} | select -ExpandProperty Url| %{ $uri = $_; Invoke-WebRequest $_ -UseDefaultCredentials -Method GET | select @{n='Uri';e={$uri}},StatusCode,StatusDescription } | Export-Csv -Path Test.csv

# 2022/10/04 quick string SHA512 hash
"inigo", "montoya" | %{ [String]::Join("", ([System.Security.Cryptography.SHA512]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes(($_).ToLowerInvariant())) | %{ "{0:X2}" -f $_ }) )} # remember to salt!

# 2023/03? openssl usages
openssl x509 -in .\cardme.t-mobile.com.36f44d9a.pem -noout -fingerprint -serial -dates -subject -pubkey ##### https://www.baeldung.com/linux/openssl-extract-certificate-info with additional 3.0 switches
openssl pkey -in public_key.pem -pubin -outform der -out public_key.der ##### https://security.stackexchange.com/questions/251343/converting-just-a-public-key-from-pem-to-der-using-openssl
openssl pkcs12 -in cardme.t-mobile.com.p12 -info -nokey -clcerts # 2023/08/22 dump fingerprint as localKeyID, not dumping a cert hides the bag attributes
openssl pkcs7 -in .\_.apache.org.p7c -inform der -text -print -noout # 2023/10/16: interpret PKCS#7 certificate chain saved from Chromium Edge

# 2023/11/28 get StatusCode from Invoke-RestMethod on error (keep trying to get both StatusCode and RawContent?) from docs
try { Invoke-RestMethod -Method get -Uri http://localhost:7071/api/customers/0 } catch { $_.Exception.Response.StatusCode }

#
